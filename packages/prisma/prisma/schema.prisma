generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  userName String  @unique @map("user_name")
  image    String?

  passwordHash String  @map("password_hash")
  password     String?

  type UserType @default(DEFAULT)

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  activityId String?   @unique @map("activity_id")
  Activity   Activity? @relation(fields: [activityId], references: [id])
  reports    Report[]

  @@map("users")
}

enum UserType {
  DEFAULT
  ACTIVITY
  ADMIN
}

model Activity {
  id          String @id @default(uuid())
  number      Int?   @unique
  title       String
  description String

  scoreType        ScoreType       @map("score_type")
  scoreOrdination  ScoreOrdination @map("score_ordination")
  scoreDescription String?         @map("score_description")
  defaultScore     Float?          @map("default_score")

  exactValue Float? @map("exact_value")

  numbers Int[] @map("numbers")

  numberOfTeams Int @map("number_of_teams")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  scores    Score[]

  User     User?
  products ActivityProduct[]
  groups   ActivityGroup[]

  @@map("activities")
}

enum ScoreType {
  NUMBER
  OBJECTS
  TIME
  DISTANCE
  WEIGHT
  POINTS
  PRICE
}

enum ScoreOrdination {
  NONE
  BIGGER
  SMALLER
  CLOSER
}

model ActivityProduct {
  id    String @id @default(uuid())
  name  String
  price Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  activityId String   @map("activity_id")
  activity   Activity @relation(fields: [activityId], references: [id])

  @@unique([activityId, name])
  @@map("activity_products")
}

model ActivityGroup {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  activities Activity[]

  @@map("activity_groups")
}

model Team {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  scores    Score[]

  scoresWithMultipleTeams Score[]  @relation("ScoreToTeams")
  reports                 Report[]

  @@map("teams")
}

model Score {
  id    String @id @default(uuid())
  value Float

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @map("activity_id")

  teamId String @map("team_id")
  team   Team   @relation(fields: [teamId], references: [id])

  scoresWithMultipleTeams Team[] @relation("ScoreToTeams")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([activityId, teamId])
  @@map("scores")
}

model ReportMotive {
  id            String  @id @default(uuid())
  name          String  @unique
  description   String?
  discountPoint Float   @map("discount_pontuation")

  reports Report[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("report_motives")
}

model Report {
  id          String  @id @default(uuid())
  description String?

  motiveId String       @map("motive_id")
  motive   ReportMotive @relation(fields: [motiveId], references: [id])

  spyId String @map("spy_id")
  spy   User   @relation(fields: [spyId], references: [id])

  teamId String @map("team_id")
  team   Team   @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reports")
}
