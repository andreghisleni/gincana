generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String
  userName String  @unique @map("user_name")
  image    String?

  passwordHash String  @map("password_hash")
  password     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  activityId String?   @unique @map("activity_id")
  Activity   Activity? @relation(fields: [activityId], references: [id])

  @@map("users")
}

model Activity {
  id          String @id @default(uuid())
  title       String
  description String

  scoreType        ScoreType       @map("score_type")
  scoreOrdination  ScoreOrdination @map("score_ordination")
  scoreDescription String?         @map("score_description")
  defaultScore     Float?          @map("default_score")

  numberOfTeams Int @map("number_of_teams")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Score     Score[]

  User User?

  @@map("activities")
}

enum ScoreType {
  NUMBER
  TIME
  DISTANCE
  WEIGHT
  POINTS
}

enum ScoreOrdination {
  NONE
  BIGGER
  SMALLER
  CLOSER
}

model Team {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  scores    Score[]

  @@map("teams")
}

model Score {
  id    String @id @default(uuid())
  value Float

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @map("activity_id")

  teamId String @map("team_id")
  team   Team   @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([activityId, teamId])
  @@map("scores")
}
